AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template AutoScalingMultiAZWithNotifications: Create
  a multi-az, load balanced and Auto Scaled sample web site running on an Django
  Web Serever. The application is configured to span all Availability Zones in
  the region and is Auto-Scaled based on the CPU utilization of the web servers.
  Notifications will be sent to the operator email address on scaling events.
  The instances are load balanced with a simple health check against the default
  web page. Also Auto Scaling group with an update policy that keeps an
  instances  running while performing a rolling update. The update proceeds only
  when the  Elastic Load Balancing health check detects that the updated
  instances are in service.
Parameters:
  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 2
    - 3
    Default: 2
    Description:  How many Availability Zones do you wish to utilize?
  VPCCidr:
    Description: The Cidir block of the VPC to create
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/20
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  IPv4MaskSize:
    Description: Mask size for IPv4 subnet addresses
    Type: Number
    Default: 8
    MinValue: 4
    MaxValue: 8
    ConstraintDescription: must be a number between 4 and 8
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: >-
      ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  AppRepository:
    Description: Repository holding the app. The string must be runnable from "git clone".
    Type: String
    Default: 'https://github.com/dext0s/django_app.git'
  AppUser:
    Description: OS user that will manage the application .
    Type: String
    Default: appuser
  AppDirectoryName:
    Description: Name of the app directory insde the /app directory.
    Type: String
    Default: django_app
  InstallScriptName:
    Description: Name of install script located on the root of git repository.
    Type: String
    Default: install.sh
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ScaleMin:
    Description: Min instances ons autoscale group
    Type: Number
    Default: 2
  ScaleMax:
    Description: Max instances ons autoscale group
    Type: Number
    Default: 3
  AppPort:
    Description: The port on which the targets receive traffic.
    Type: Number
    Default: 8000
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 Bastion
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Conditions:
  BuildSubnetsC:         !Equals [ !Ref NumberOfAZs, 3 ] 
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-south-1:
      HVM64: ami-0e742cca61fb65051
      HVMG2: NOT_SUPPORTED
    eu-north-1:
      HVM64: ami-0bb935e4614c12d86
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-00575c0cbc20caf50
      HVMG2: NOT_SUPPORTED
    eu-west-2:
      HVM64: ami-09ee0944866c73f62
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-06e0ce9d3339cb039
      HVMG2: NOT_SUPPORTED
    ap-northeast-3:
      HVM64: ami-090ae0a4750988734
      HVMG2: NOT_SUPPORTED
    ap-northeast-2:
      HVM64: ami-0f6e451b865011317
      HVMG2: NOT_SUPPORTED
    ap-northeast-1:
      HVM64: ami-0ffac3e16de16665e
      HVMG2: NOT_SUPPORTED
    ca-central-1:
      HVM64: ami-099effcf516c942b7
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-01fc9174dd9330556
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      HVM64: ami-0f2eac25772cd4e36
      HVMG2: NOT_SUPPORTED
    ap-southeast-2:
      HVM64: ami-0692dea0a2f8a1b35
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0c0d3776ef525d5dd
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-0dfcb1ef8550277af
      HVMG2: NOT_SUPPORTED
    us-east-2:
      HVM64: ami-0cc87e5027adcdca8
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-00569e54da628d17c
      HVMG2: NOT_SUPPORTED
    us-west-2:
      HVM64: ami-0f1a5f5ada0e7da53
      HVMG2: NOT_SUPPORTED
Resources:
#Network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Ref VPCCidr , 6, !Ref IPv4MaskSize ]]
      AvailabilityZone: !Select [ 0, !GetAZs ]   
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !Ref VPCCidr , 6, !Ref IPv4MaskSize ]]
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  PublicSubnetC:
   Type: AWS::EC2::Subnet
   Condition: BuildSubnetsC
   Properties:
     VpcId: !Ref VPC
     CidrBlock: !Select [ 2, !Cidr [ !Ref VPCCidr , 6, !Ref IPv4MaskSize ]]
     AvailabilityZone: !Select [ 2, !GetAZs ] 
     Tags:
     - Key: Name
       Value: !Sub ${AWS::StackName}-Public-C
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Ref VPCCidr , 6, !Ref IPv4MaskSize ]]
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !Ref VPCCidr , 6, !Ref IPv4MaskSize ]]
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Condition: BuildSubnetsC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, !Cidr [ !Ref VPCCidr , 6, !Ref IPv4MaskSize ]]
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the third AZ in the list 
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:  # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSubnetsC
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildSubnetsC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
#AutoScaling  
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier: !If 
        - BuildSubnetsC
        -
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
            - !Ref PrivateSubnetC
        - 
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref ScaleMin
      MaxSize: !Ref ScaleMax
      HealthCheckType: ELB
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - 'autoscaling:EC2_INSTANCE_LAUNCH'
            - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
            - 'autoscaling:EC2_INSTANCE_TERMINATE'
            - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          full_install:
            - install_cfn
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets full_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref WebServerInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - app_name=
            - !Ref AppDirectoryName
            - |+

            - app_user=
            - !Ref AppUser
            - |+

            - install_script=
            - !Ref InstallScriptName
            - |+

            - app_repo=
            - !Ref AppRepository
            - |+

            - |
              app_dir="/app/${app_name}"
            - |
              app_basedir=$( dirname $app_dir)
            - |
              yum update -y
            - |
              yum install -y git
            - |
              useradd -m "$app_user"
            - |
              mkdir -p $app_dir
            - |
              chown -R "${app_user}:${app_user}" "$app_basedir"
            - |
              su - "$app_user" -c "git clone $app_repo $app_dir"
            - >
              su - "$app_user" -c "cd $app_dir; chmod +x
              $install_script;./${install_script}"
            - 'until [ "$state" == "\"healthy\"" ]; do '
            - '  state=$(aws --region '
            - !Ref 'AWS::Region'
            - ' elbv2 describe-target-health '
            - '              --target-group-arn '
            - !Ref ALBTargetGroup
            - '              --targets Id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id),Port='
            - !Ref AppPort
            - '               --query TargetHealthDescriptions[0].TargetHealth.State); '
            - '  sleep 10; '
            - '  done;      '
            - |+

            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets full_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: LessThanThreshold
#Load Balancer  
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: InternetGateway
    Properties:
      Subnets: !If 
        - BuildSubnetsC
        -
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
            - !Ref PublicSubnetC
        - 
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: !Ref AppPort
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
#Security Groups  
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP traffic plus SSH from instances in same SG.
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  SSHIngressToInstance:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      SourceSecurityGroupId: !GetAtt 
        - BastionSecurityGroup
        - GroupId
      GroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
  HTTPIngressForInstance:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      IpProtocol: tcp
      FromPort: !Ref AppPort
      ToPort: !Ref AppPort
      SourceSecurityGroupId: !GetAtt 
        - ALBSecurityGroup
        - GroupId
      GroupId: !GetAtt 
        - InstanceSecurityGroup
        - GroupId
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP from the load balancer only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 1024
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: HTTP from the load balancer only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
#IAM  
  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref DescribeHealthRole
  DescribeHealthRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: describe-instance-health-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DescribeTargetHealth'
                Resource: '*'
#Bastion instance
  BastionInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        ImageId: !FindInMap 
          - AWSRegionArch2AMI
          - !Ref 'AWS::Region'
          - !FindInMap 
            - AWSInstanceType2Arch
            - !Ref InstanceType
            - Arch
        NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref BastionSecurityGroup
          SubnetId: !Ref PublicSubnetA
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
